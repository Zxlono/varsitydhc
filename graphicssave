-- Put this script inside a LocalScript

local parentFolderName = "Ignored" -- Replace with the name of the parent folder
local folderNameToDelete = "Shop" -- Replace with the name of the folder you want to delete

-- Function to find a folder by name within a parent folder
local function findFolderInParent(parentFolder, folderName)
    local folder = parentFolder:FindFirstChild(folderName)

    if folder and folder:IsA("Folder") then
        return folder
    else
        return nil
    end
end

-- Function to delete a folder and its contents (including models)
local function deleteFolderAndModels(folder)
    if folder then
        for _, descendant in pairs(folder:GetDescendants()) do
            if descendant:IsA("Model") then
                descendant:Destroy()
            end
        end
        folder:Destroy()
        print("Folder and models deleted:", folder:GetFullName())
    else
        warn("Folder not found:", folderNameToDelete)
    end
end

-- Get the specified parent folder
local parentFolder = workspace:FindFirstChild(parentFolderName)

if parentFolder then
    -- Get the specified folder within the parent folder
    local targetFolder = findFolderInParent(parentFolder, folderNameToDelete)

    -- Delete the folder and its contents (including models)
    deleteFolderAndModels(targetFolder)
else
    warn("Parent folder not found:", parentFolderName)
end

-- Define the path of the folder containing the mesh parts
local folderPath = {"MAP", "Map"} -- Replace with the path of the folder containing the mesh parts

-- Define the name of the mesh parts you want to remove
local meshNameToRemove = "Meshes/mountain" -- Replace with the name of the mesh parts you want to remove

-- Function to find a folder by path
local function findFolderByPath(path)
    local currentFolder = workspace

    for _, folderName in pairs(path) do
        currentFolder = currentFolder:FindFirstChild(folderName)

        if not currentFolder or not currentFolder:IsA("Folder") then
            return nil
        end
    end

    return currentFolder
end

-- Function to duplicate all mesh parts within a folder except those with the specified name
local function duplicateMeshPartsExceptName(folder, name)
    local duplicateParts = {}

    for _, descendant in pairs(folder:GetDescendants()) do
        if descendant:IsA("MeshPart") and descendant.Name ~= name then
            local duplicatePart = descendant:Clone()
            table.insert(duplicateParts, duplicatePart)
        end
    end

    -- Clear the folder
    folder:ClearAllChildren()

    -- Reparent the duplicated parts back to the folder
    for _, duplicatePart in pairs(duplicateParts) do
        duplicatePart.Parent = folder
    end
end

-- Get the specified folder by path
local targetFolder = findFolderByPath(folderPath)

if targetFolder then
    -- Duplicate all mesh parts within the folder except those with the specified name
    duplicateMeshPartsExceptName(targetFolder, meshNameToRemove)
else
    warn("Folder not found:", table.concat(folderPath, " > "))
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local MainScreenGui = LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("MainScreenGui", true)

local function Attack()
	if LocalPlayer.Backpack:FindFirstChild("Combat") then
		LocalPlayer.Backpack.Combat.Parent = LocalPlayer.Character
	end

	local Combat = LocalPlayer.Character:FindFirstChild("Combat")
	if not Combat then
		print("No combat tool :(")
		return
	end

	Combat:Activate()
	wait(0.1) -- Adjust based on your game's mechanics
	Combat:Deactivate()
end

local function buyBoxingMoveset()
	local movesetShop = game.Workspace.Ignored.Shop:FindFirstChild("Boxing Moveset (Require: Max Box Stat) - $0")
	if movesetShop and movesetShop:FindFirstChild("ClickDetector") then
		fireclickdetector(movesetShop.ClickDetector)
		print("Attempted to buy the Boxing Moveset.")
	else
		warn("Boxing Moveset shop or ClickDetector not found.")
	end
end

local function StartBoxing()
	local BoxingValueObject = LocalPlayer.DataFolder.Information:FindFirstChild("BoxingValue")
	local MaxBoxingValue = ReplicatedStorage:FindFirstChild("MaxBoxing")

	-- Create BoxingValueObject if it doesn't exist to handle zero progress scenario
	if not BoxingValueObject then
		BoxingValueObject = Instance.new("IntValue")
		BoxingValueObject.Value = 0
	end

	if not MaxBoxingValue then
		warn("MaxBoxing not found.")
		return
	end

	if BoxingValueObject.Value / MaxBoxingValue.Value >= 1 then
		print("Boxing bar is already filled.")
		buyBoxingMoveset()
		loadstring(game:HttpGet('https://raw.githubusercontent.com/Zxlono/varsitydhc/main/autofarm2'))()
		return
	end

	LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-251, 22, -1136)

	repeat
		wait(0.1)
		Attack()
		-- Refresh the boxing value to ensure it's up to date
		BoxingValueObject.Value = LocalPlayer.DataFolder.Information:FindFirstChild("BoxingValue") and LocalPlayer.DataFolder.Information.BoxingValue.Value or 0
	until BoxingValueObject.Value / MaxBoxingValue.Value >= 1

	buyBoxingMoveset()
	loadstring(game:HttpGet('https://raw.githubusercontent.com/Zxlono/varsitydhc/main/autofarm2'))()
end

StartBoxing()

local function handleRedeemCommand(code)
	local localPlayer = game.Players.LocalPlayer
	game:GetService("ReplicatedStorage").MainEvent:FireServer("EnterPromoCode", code)
end

for _, code in ipairs(getgenv().codes) do
	handleRedeemCommand(code)
end

local function controlFPS()
    local RunService = game:GetService("RunService")
    while true do
        local t0 = tick()
        RunService.Heartbeat:Wait()
        repeat until (t0 + 1/getgenv().fps) < tick()
    end
end

spawn(controlFPS)

game:GetService("RunService"):Set3dRenderingEnabled(false)
settings().Rendering.QualityLevel = 1
UserSettings().GameSettings.MasterVolume = 0

-- Put this script inside a LocalScript

local folderPath = {"MAP", "Map"} -- Replace with the path of the folder containing the mesh parts
local meshNameToRemove = "Meshes/mountain" -- Replace with the name of the mesh parts you want to remove

-- Function to find a folder by path
local function findFolderByPath(path)
	local currentFolder = workspace

	for _, folderName in pairs(path) do
		currentFolder = currentFolder:FindFirstChild(folderName)

		if not currentFolder or not currentFolder:IsA("Folder") then
			return nil
		end
	end

	return currentFolder
end

-- Function to duplicate all mesh parts within a folder except those with the specified name
local function duplicateMeshPartsExceptName(folder, name)
	local duplicateParts = {}

	for _, descendant in pairs(folder:GetDescendants()) do
		if descendant:IsA("MeshPart") and descendant.Name ~= name then
			local duplicatePart = descendant:Clone()
			table.insert(duplicateParts, duplicatePart)
		end
	end

	-- Clear the folder
	folder:ClearAllChildren()

	-- Reparent the duplicated parts back to the folder
	for _, duplicatePart in pairs(duplicateParts) do
		duplicatePart.Parent = folder
	end
end

-- Get the specified folder by path
local targetFolder = findFolderByPath(folderPath)

if targetFolder then
	-- Duplicate all mesh parts within the folder except those with the specified name
	duplicateMeshPartsExceptName(targetFolder, meshNameToRemove)
else
	warn("Folder not found:", table.concat(folderPath, " > "))
end

local player = game.Players.LocalPlayer

-- Function to buy the key
local function buyKey()
	local keyShop = game.Workspace.Ignored.Shop:FindFirstChild("[Key] - $133")
	if keyShop and keyShop:FindFirstChild("ClickDetector") then
		fireclickdetector(keyShop.ClickDetector)
	else
		warn("Key shop or ClickDetector not found.")
	end
end

-- Function to show the key with retries
local function showKey(retryCount)
	local key = player.Backpack:FindFirstChild("[Key]")
	if key then
		key.Parent = player.Character
	elseif retryCount > 0 then
		wait(1) -- Wait for a bit before retrying
		showKey(retryCount - 1) -- Retry showing the key
	else
		warn("[Key] could not be shown after retries.")
	end
end

-- Proximity and direction check setup
local targetCFrame = CFrame.new(-294.648, 21.758, -121.547) -- Target CFrame for detection
local detectionRadius = 90 -- Detection radius around the target CFrame
local hasTeleported = false -- Flag to prevent repeated teleportation and actions

game:GetService("RunService").Heartbeat:Connect(function()
	if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
		local playerPosition = player.Character.HumanoidRootPart.Position
		local distanceToTarget = (playerPosition - targetCFrame.Position).magnitude

		-- Check if the player is within the detection radius
		if distanceToTarget <= detectionRadius then
			local playerDirection = player.Character.HumanoidRootPart.CFrame.LookVector
			local directionToTarget = (targetCFrame.Position - playerPosition).unit
			local dotProduct = playerDirection:Dot(directionToTarget)

			-- Check if the player is facing the target direction (dot product > 0 means facing towards)
			if dotProduct > 0 and not hasTeleported then
				player.Character.HumanoidRootPart.CFrame = CFrame.new(-270.911, 21.748, -238.997) -- Teleport to key buying location
				wait(0.5) -- Ensure the game registers the player's new position
				buyKey()
				wait(0.5) -- Wait for the key purchase to process
				showKey(3) -- Attempt to show the key with up to 3 retries
				hasTeleported = true -- Prevent repeated actions
			end
		else
			hasTeleported = false -- Reset when the player moves away from the detection area
		end
	end
end)
